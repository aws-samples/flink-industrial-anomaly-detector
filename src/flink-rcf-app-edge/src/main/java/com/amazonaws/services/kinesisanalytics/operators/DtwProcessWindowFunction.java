/*Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: MIT-0 */
package com.amazonaws.services.kinesisanalytics.operators;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

import org.apache.flink.streaming.api.functions.windowing.ProcessAllWindowFunction;
import org.apache.flink.streaming.api.windowing.windows.GlobalWindow;
import org.apache.flink.util.Collector;

import com.amazonaws.services.timestream.TimestreamPoint;
import com.amazonaws.services.timestreamwrite.model.MeasureValueType;

import smile.math.distance.DynamicTimeWarping;

@SuppressWarnings({ "serial" })
public class DtwProcessWindowFunction
		extends ProcessAllWindowFunction<List<TimestreamPoint>, List<TimestreamPoint>, GlobalWindow> {

	@Override
	public void process(Context context, Iterable<List<TimestreamPoint>> input, Collector<List<TimestreamPoint>> out) {

		int count = 0;
		int measureCount = 0;
		String fault = "";
		List<TimestreamPoint> export = new ArrayList<TimestreamPoint>();
		
		double[] searchPattern = {
				0.7040141091215001,0.6986247439929214,0.6910280719682845,0.6836515113209616,0.6795342972463301,0.6793496716418141,
				0.677292638624667,0.6729096253128604,0.6672123036743932,0.9779914111706774,0.9709178121582116,0.963332807633374,0.9468070130187256,0.9446490093398607,
				0.6322236919874338,0.628714416680979,0.6222940182022347,0.6193561184705721,0.6164140754176768,0.6406231171483108,0.6316669188165446,0.6312627111899409,
				0.6272119769966014,0.623294468072588,0.5905761952220517,0.5882927679533119,0.5866344864272471,2.279706207106509,2.2384411018267163,2.2125795134918795,
				2.1986788206062426,1.9444254290084246,1.9139489734513828,1.8330106784033895,1.825171662729677,1.7942810899254615,2.0503474374582957,2.0420950242080225,
				1.9765022089256994,1.935375193618234,1.8708692979951929,1.620552604422511,1.562373580522418,1.5659942181428212,1.5310398018575648,1.4859363383355444,
				1.9139701278187784,1.8883768085761867,1.8167946605216483,1.776168669341124,1.7388704443072234,3.6772731981790168,3.654641660726083,3.522968371709981,
				3.3953109387866336,3.346826858792759,2.4286253500175037,2.3032232323782575,2.2258684149351082,2.2058541401346954,2.155041704608537,2.0102964884869614,
				2.011465606983392,1.9835541749876322,1.8880059383541976,1.8190025933671206,1.9452764445215605,1.8805354698650254,1.8447695180550547,1.8052657841259192,
				1.7461568816521151,1.366237715947169,1.358403140534707,1.3526199632692368,1.3174138879446176,1.315255149369576,1.5650209651553542,1.539570938551748,
				1.503281852689014,1.4562544839946292,1.4376643312902226,1.3192026974397428,1.2972368987162932,1.287718173003625,1.2719879162987886,1.2616503446199125,
				1.393818483930722,1.37185186368572,1.331380425407335,1.3047604362075873,1.2982539678387526,2.1850989596824473,2.098911993907868,2.060424470405077,
				1.99333931856798,2.0008348407967347,2.3163138086481982,2.1681280720361618,2.0330102179925493,1.99050596122332,1.9214368461479217,1.8915441872962484,
				1.854595905635969,1.8035821934580327,1.7715616179709786,1.7355275043226788,1.0388394131073515,1.0502359971308897,1.0160640466250093,0.9898254035959126,
				0.9809559067058984,1.1623120870145258,1.135936799189388,1.1218041595761652,1.1134362548489083,1.0793636535994167,1.1992291806243407,1.1935124344875419,
				1.170242992037581,1.1436730259467836,1.1327825190356682,1.036706929597428,1.0193237347233195,1.0122452069736616,1.0096512529220985,1.0058172594695334,
				1.2599275652006816,1.2405928514671671,1.2249422295790382,1.240398688126779,1.2212277676867584,1.1172018622205522,1.1070330625442097,1.0970251798835073,
				1.0911345951143687,1.0796240379682878,1.3260679190891866,1.282755700088711,1.253431436901967,1.2388028095759902,1.2138362995243244,1.1535403159012738,
				1.1372212088104467,1.1267096432843626,1.1112313455746048,1.1037415588700725,1.8686122319670782,1.7950214912022648,1.7427082315287512,1.6948933157989676,
				1.6736044545213928,1.6304948699438986,1.6005379728650688,1.5619014548719263,1.5277258838455048,1.492223126675111,1.5696044665044382,1.5577289683919435,
				1.5257459785826566,1.4845082216632457,1.4416422630700358,1.143927705623371,1.1152552946868777,1.0981262549128947,1.0761358847356304,1.0743758323456405
		};
		System.out.println("Search pattern val length: "+searchPattern.length);
		
		for (List<TimestreamPoint> in : input) {
			measureCount = in.size();
		}
		ArrayList<Double> stream11measuresArr = new ArrayList<Double>();

		for (List<TimestreamPoint> in : input) {
			
			// System.out.println("##########Hello "+in.size());
			for (TimestreamPoint inner : in) {
				// System.out.println("#################Hello "+inner.getMeasureName());
				if (inner.getMeasureName().equals("anomaly_score_stream_11")) {
					stream11measuresArr.add(Double.parseDouble(inner.getMeasureValue()));
				}
				if (inner.getMeasureName().equals("faultNumber")) {
					fault = inner.getMeasureValue();
				}
			}
		}
		
		
		System.out.println("Stream11-measure count in window: "+stream11measuresArr.size());
		double[] stream11measures = new double[stream11measuresArr.size()];
		for (double val  : stream11measuresArr) {
			stream11measures[count] = val;
			count++;
		}
		
		// add matcher info & fan out...
		double d = 0.0;
		if (stream11measures.length>=searchPattern.length) d = DynamicTimeWarping.d(searchPattern,  stream11measures, 50);
		
		
		Double fault18Distance = 0.0;
		if (d>0.0 && d<10000000.0) fault18Distance = 1/d*100;
		else fault18Distance = 0.0;
		
		
			//create new TimestreamPoint with Fault15-likelyness val
			TimestreamPoint p = new TimestreamPoint();
			p.setMeasureName("fault18_likeliness");
			p.setMeasureValue(String.valueOf(fault18Distance));
			p.setMeasureValueType(MeasureValueType.DOUBLE);
			p.setTime(Instant.now().toEpochMilli());
			p.setTimeUnit("MILLISECONDS");
			p.addDimension("factory", "test-factory-1");

			
			
			export.add(p);
			out.collect(export);
		
		
		System.out.println("Fault: "+fault);
		System.out.println("Distance: "+fault18Distance);
		System.out.println("raw Distance: "+d);

	}

}
